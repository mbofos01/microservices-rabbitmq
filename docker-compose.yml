services:
  rabbitmq:
    image: rabbitmq:3-management  # RabbitMQ with management interface
    ports:
      - "5672:5672"   # RabbitMQ port for messaging
      - "15672:15672" # Management interface port (optional)
    healthcheck: # Check if RabbitMQ is ready to accept connections
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment: # Disable logging
      RABBITMQ_LOGS: "/dev/null"
      RABBITMQ_LOG_LEVEL: "none"
  
  python-consumer:
    build:
      context: ./python-consumer  # Directory containing the Python Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be ready
    environment:
      - RABBITMQ_HOST=rabbitmq
    restart: always  # Automatically restart the container if it crashes
    links:
      - rabbitmq
    volumes:
      - ./shared-data:/shared

  java-producer:
    build:
      context: ./java-producer  # Directory containing the Java Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be ready
    environment:
      - RABBITMQ_HOST=rabbitmq  # Use the service name as the RabbitMQ host
    links:
      - rabbitmq

  python-producer:
    build:
      context: ./python-producer  # Directory containing the Python Dockerfile
    ports:
      - "5000:5000" # Expose the Flask web server port
    depends_on:
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be ready
    environment:
      - RABBITMQ_HOST=rabbitmq  # Use the service name as the RabbitMQ host
      - FLASK_ENV=development
    links:
      - rabbitmq
    volumes:
      - ./shared-data:/shared

# Define a volume to share data between containers
volumes:
  shared-data: